{"version":3,"sources":["../../app-es6/helper/DateHelper.js"],"names":["DateHelper","Error","texto","test","Date","split","map","item","indice","data","getDate","getMonth","getFullYear"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAAaA,U;AACX,8BAAa;AAAA;;AACX,gBAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED;;;;;sCACmBC,K,EAAM;AACvB;AACA;;AAEA,gBAAG,CAAC,oBAAoBC,IAApB,CAAyBD,KAAzB,CAAJ,EACE,MAAM,IAAID,KAAJ,CAAU,yCAAV,CAAN;;AAEF,sDAAWG,IAAX,oCAAoB;AAChBF,kBAAMG,KAAN,CAAY,GAAZ,EACGC,GADH,CACO,UAACC,IAAD,EAAOC,MAAP;AAAA,qBAAkBD,OAAOC,SAAS,CAAlC;AAAA,aADP,CADJ;AAID;;;sCAEkBC,I,EAAK;AACtB,mBAAUA,KAAKC,OAAL,EAAV,UAA4BD,KAAKE,QAAL,KAAgB,CAA5C,UAAiDF,KAAKG,WAAL,EAAjD,CADsB,CACiD;AACvE;AACA;AACA;AACD","file":"DateHelper.js","sourcesContent":["export class DateHelper {\r\n  constructor(){\r\n    throw new Error('DateHelper não pode ser instânciada.');\r\n  }\r\n\r\n  // Definindo os métodos como static, eu posso invocar eles direto do objeto, sem precisar instanciar ele. ECMAScript 6\r\n  static textForDate(texto){\r\n    //new Date('ANO', 'MES', 'DIA')\r\n    //let data = new Date(this._inputData.value.split('-'));\r\n\r\n    if(!/\\d{4}-\\d{2}-\\d{2}/.test(texto))\r\n      throw new Error('A data deve estar no formato YYYY-MM-DD');\r\n\r\n    return new Date(... //Spread operator - o array é desmembrado e cada elemento dele é passado como um parâmetro do construtor\r\n        texto.split('-')\r\n          .map((item, indice) => item - indice % 2)  //Arrow Functions\r\n      );\r\n  }\r\n\r\n  static dateForText(data){\r\n    return `${data.getDate()}/${data.getMonth()+1}/${data.getFullYear()}`; // Template String\r\n    // return data.getDate()\r\n    //     + '/' + (data.getMonth()+1)\r\n    //     + '/' + data.getFullYear();\r\n  }\r\n}\r\n"]}