{"version":3,"sources":["../../app-es6/service/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA;AACA;AACA,IAAIA,oBAAqB,YAAU;AACjC,MAAMC,SAAS,CAAC,aAAD,CAAf;AACA,MAAMC,UAAU,CAAhB;AACA,MAAMC,SAAS,YAAf;;AAEA,MAAIC,aAAa,IAAjB;AACA,MAAIC,QAAQ,IAAZ;;AAEA;AACE,iCAAc;AAAA;;AACZ,YAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAHH;AAAA;AAAA,sCAIyB;AACrB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEA;AACAQ,sBAAYI,eAAZ,GAA8B,aAAK;AACjCd,8BAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACD,WAFD;;AAIAR,sBAAYS,SAAZ,GAAwB,aAAK;;AAE3B,gBAAG,CAACf,UAAJ,EAAe;AACbA,2BAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,sBAAQD,WAAWC,KAAnB;AACAD,yBAAWC,KAAX,GAAmB,YAAW;AAAC;AAC7B,sBAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACD,eAFD;AAGD;AACDE,oBAAQJ,UAAR;AACD,WAVD;;AAYAM,sBAAYU,OAAZ,GAAsB,aAAK;AACzBC,oBAAQC,GAAR,CAAYN,EAAEC,MAAF,CAASM,KAArB;;AAEAd,mBAAOO,EAAEC,MAAF,CAASM,KAAT,CAAeC,IAAtB;AACD,WAJD;AAKD,SAzBM,CAAP;AA0BD;AA/BH;AAAA;AAAA,oCAiCuBpB,UAjCvB,EAiCkC;AAC9BH,eAAOwB,OAAP,CAAe,iBAAS;AACtB,cAAGrB,WAAWsB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAA+C;AAC7CxB,uBAAWyB,iBAAX,CAA6BD,KAA7B;AACD;;AAEDxB,qBAAW0B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACD,SAND;AAOD;AAzCH;AAAA;AAAA,wCA2C0B;AACtB,YAAG3B,UAAH,EAAc;AACZA,qBAAWC,KAAX,GAAmBA,KAAnB;AACAD,qBAAWC,KAAX;AACAD,uBAAa,IAAb;AACAC,kBAAQ,IAAR;AACD;AACF;AAlDH;;AAAA;AAAA;AAoDD,CA5DuB,EAAxB,C,CA4DM","file":"ConnectionFactory.js","sourcesContent":["// Uma forma de encapsular a minha classe e tornar as variáveis globais em privadas\r\n// Module Pattern\r\nvar ConnectionFactory = (function(){\r\n  const stores = ['negociacoes'];\r\n  const version = 4;\r\n  const dbName = 'aluraframe';\r\n\r\n  var connection = null;\r\n  var close = null;\r\n\r\n  return class ConnectionFactory {\r\n    constructor() {\r\n      throw new Error('Não é possível criar instâncias de ConnectionFactory');\r\n    }\r\n    static getConnection() {\r\n      return new Promise((resolve, reject) => {\r\n        let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n        //triade de eventos\r\n        openRequest.onupgradeneeded = e => {\r\n          ConnectionFactory._createStores(e.target.result);\r\n        };\r\n\r\n        openRequest.onsuccess = e => {\r\n\r\n          if(!connection){\r\n            connection = e.target.result;\r\n            close = connection.close;\r\n            connection.close = function() {// Monkey Patch\r\n              throw new Error('Você não pode fechar diretamente a connection.')\r\n            };\r\n          }\r\n          resolve(connection);\r\n        };\r\n\r\n        openRequest.onerror = e => {\r\n          console.log(e.target.error);\r\n\r\n          reject(e.target.error.name);\r\n        };\r\n      });\r\n    }\r\n\r\n    static _createStores(connection){\r\n      stores.forEach(store => {\r\n        if(connection.objectStoreNames.contains(store)){\r\n          connection.deleteObjectStore(store);\r\n        }\r\n\r\n        connection.createObjectStore(store, {autoIncrement: true});\r\n      });\r\n    }\r\n\r\n    static closeConnection(){\r\n      if(connection){\r\n        connection.close = close;\r\n        connection.close();\r\n        connection = null;\r\n        close = null;\r\n      }\r\n    }\r\n  }\r\n})(); // Uma função autoinvocada, que executa logo após ser carregada\r\n"]}