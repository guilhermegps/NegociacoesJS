{"version":3,"sources":["../../app-es6/service/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;AAAA,IAAMA,SAAS,CAAC,aAAD,CAAf;AACA,IAAMC,UAAU,CAAhB;AACA,IAAMC,SAAS,YAAf;;AAEA,IAAIC,aAAa,IAAjB;AACA,IAAIC,QAAQ,IAAZ;;IAEaC,iB,WAAAA,iB;AACX,+BAAc;AAAA;;AACZ,UAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;;;oCACsB;AACrB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEA;AACAS,oBAAYI,eAAZ,GAA8B,aAAK;AACjCT,4BAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACD,SAFD;;AAIAR,oBAAYS,SAAZ,GAAwB,aAAK;;AAE3B,cAAG,CAAChB,UAAJ,EAAe;AACbA,yBAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,oBAAQD,WAAWC,KAAnB;AACAD,uBAAWC,KAAX,GAAmB,YAAW;AAAC;AAC7B,oBAAM,IAAIE,KAAJ,CAAU,gDAAV,CAAN;AACD,aAFD;AAGD;AACDE,kBAAQL,UAAR;AACD,SAVD;;AAYAO,oBAAYU,OAAZ,GAAsB,aAAK;AACzBC,kBAAQC,GAAR,CAAYN,EAAEC,MAAF,CAASM,KAArB;;AAEAd,iBAAOO,EAAEC,MAAF,CAASM,KAAT,CAAeC,IAAtB;AACD,SAJD;AAKD,OAzBM,CAAP;AA0BD;;;kCAEoBrB,U,EAAW;AAC9BH,aAAOyB,OAAP,CAAe,iBAAS;AACtB,YAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAA+C;AAC7CzB,qBAAW0B,iBAAX,CAA6BD,KAA7B;AACD;;AAEDzB,mBAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACD,OAND;AAOD;;;sCAEuB;AACtB,UAAG5B,UAAH,EAAc;AACZA,mBAAWC,KAAX,GAAmBA,KAAnB;AACAD,mBAAWC,KAAX;AACAD,qBAAa,IAAb;AACAC,gBAAQ,IAAR;AACD;AACF","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\nconst version = 4;\r\nconst dbName = 'aluraframe';\r\n\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n  constructor() {\r\n    throw new Error('Não é possível criar instâncias de ConnectionFactory');\r\n  }\r\n  static getConnection() {\r\n    return new Promise((resolve, reject) => {\r\n      let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n      //triade de eventos\r\n      openRequest.onupgradeneeded = e => {\r\n        ConnectionFactory._createStores(e.target.result);\r\n      };\r\n\r\n      openRequest.onsuccess = e => {\r\n\r\n        if(!connection){\r\n          connection = e.target.result;\r\n          close = connection.close;\r\n          connection.close = function() {// Monkey Patch\r\n            throw new Error('Você não pode fechar diretamente a connection.')\r\n          };\r\n        }\r\n        resolve(connection);\r\n      };\r\n\r\n      openRequest.onerror = e => {\r\n        console.log(e.target.error);\r\n\r\n        reject(e.target.error.name);\r\n      };\r\n    });\r\n  }\r\n\r\n  static _createStores(connection){\r\n    stores.forEach(store => {\r\n      if(connection.objectStoreNames.contains(store)){\r\n        connection.deleteObjectStore(store);\r\n      }\r\n\r\n      connection.createObjectStore(store, {autoIncrement: true});\r\n    });\r\n  }\r\n\r\n  static closeConnection(){\r\n    if(connection){\r\n      connection.close = close;\r\n      connection.close();\r\n      connection = null;\r\n      close = null;\r\n    }\r\n  }\r\n}\r\n"]}