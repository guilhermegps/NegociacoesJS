{"version":3,"sources":["../../app-es6/service/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,Y,GAAS,CAAC,aAAD,C;AACTC,a,GAAU,C;AACVC,Y,GAAS,Y;AAEXC,gB,GAAa,I;AACbC,W,GAAQ,I;;mCAECC,iB;AACX,qCAAc;AAAA;;AACZ,gBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;;;0CACsB;AACrB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEA;AACAS,0BAAYI,eAAZ,GAA8B,aAAK;AACjCT,kCAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACD,eAFD;;AAIAR,0BAAYS,SAAZ,GAAwB,aAAK;;AAE3B,oBAAG,CAAChB,UAAJ,EAAe;AACbA,+BAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,0BAAQD,WAAWC,KAAnB;AACAD,6BAAWC,KAAX,GAAmB,YAAW;AAAC;AAC7B,0BAAM,IAAIE,KAAJ,CAAU,gDAAV,CAAN;AACD,mBAFD;AAGD;AACDE,wBAAQL,UAAR;AACD,eAVD;;AAYAO,0BAAYU,OAAZ,GAAsB,aAAK;AACzBC,wBAAQC,GAAR,CAAYN,EAAEC,MAAF,CAASM,KAArB;;AAEAd,uBAAOO,EAAEC,MAAF,CAASM,KAAT,CAAeC,IAAtB;AACD,eAJD;AAKD,aAzBM,CAAP;AA0BD;;;wCAEoBrB,U,EAAW;AAC9BH,mBAAOyB,OAAP,CAAe,iBAAS;AACtB,kBAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAA+C;AAC7CzB,2BAAW0B,iBAAX,CAA6BD,KAA7B;AACD;;AAEDzB,yBAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACD,aAND;AAOD;;;4CAEuB;AACtB,gBAAG5B,UAAH,EAAc;AACZA,yBAAWC,KAAX,GAAmBA,KAAnB;AACAD,yBAAWC,KAAX;AACAD,2BAAa,IAAb;AACAC,sBAAQ,IAAR;AACD;AACF","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\nconst version = 4;\r\nconst dbName = 'aluraframe';\r\n\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n  constructor() {\r\n    throw new Error('Não é possível criar instâncias de ConnectionFactory');\r\n  }\r\n  static getConnection() {\r\n    return new Promise((resolve, reject) => {\r\n      let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n      //triade de eventos\r\n      openRequest.onupgradeneeded = e => {\r\n        ConnectionFactory._createStores(e.target.result);\r\n      };\r\n\r\n      openRequest.onsuccess = e => {\r\n\r\n        if(!connection){\r\n          connection = e.target.result;\r\n          close = connection.close;\r\n          connection.close = function() {// Monkey Patch\r\n            throw new Error('Você não pode fechar diretamente a connection.')\r\n          };\r\n        }\r\n        resolve(connection);\r\n      };\r\n\r\n      openRequest.onerror = e => {\r\n        console.log(e.target.error);\r\n\r\n        reject(e.target.error.name);\r\n      };\r\n    });\r\n  }\r\n\r\n  static _createStores(connection){\r\n    stores.forEach(store => {\r\n      if(connection.objectStoreNames.contains(store)){\r\n        connection.deleteObjectStore(store);\r\n      }\r\n\r\n      connection.createObjectStore(store, {autoIncrement: true});\r\n    });\r\n  }\r\n\r\n  static closeConnection(){\r\n    if(connection){\r\n      connection.close = close;\r\n      connection.close();\r\n      connection = null;\r\n      close = null;\r\n    }\r\n  }\r\n}\r\n"]}