{"version":3,"sources":["../../app-es6/service/HttpService.js"],"names":["HttpService","res","ok","Error","statusText","url","fetch","then","_handleErrors","json","dado","headers","method","body","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAAaA,W;;;;;;;wCACGC,G,EAAI;AAChB,gBAAG,CAACA,IAAIC,EAAR,EAAY;AACV,oBAAMC,MAAMF,IAAIG,UAAV,CAAN,CAFc,CAEe;;AAE/B,mBAAOH,GAAP,CAJgB,CAIJ;AACb;;;8BAEGI,G,EAAK;AAAA;;AAAE;AACT,mBAAOC,MAAMD,GAAN,EAAW;AAAX,aACJE,IADI,CACC;AAAA,qBAAO,MAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,aADD,EACiC;AADjC,aAEJM,IAFI,CAEC;AAAA,qBAAON,IAAIQ,IAAJ,EAAP;AAAA,aAFD,CAAP,CADO,CAGqB;AAC7B;;;+BAEIJ,G,EAAKK,I,EAAM;AAAA;;AACd,mBAAOJ,MAAMD,GAAN,EAAW;AAChBM,uBAAS,EAAC,gBAAiB,kBAAlB,EADO;AAEhBC,sBAAQ,MAFQ;AAGhBC,oBAAMC,KAAKC,SAAL,CAAeL,IAAf;AAHU,aAAX,EAKNH,IALM,CAKD;AAAA,qBAAO,OAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,aALC,CAAP;AAMD","file":"HttpService.js","sourcesContent":["export class HttpService {\r\n  _handleErrors(res){\r\n    if(!res.ok) // O 'ok', se a resposta for obtida com status entre 200 e 299 ele retorna true\r\n      throw Error(res.statusText); // Mensagem de erro de status\r\n\r\n    return res; // A resposta possui métodos de conversão para json() e text()\r\n  }\r\n\r\n  get(url) { // Fetch API\r\n    return fetch(url) // busca para esta url\r\n      .then(res => this._handleErrors(res)) //Verifica se não houve erros\r\n      .then(res => res.json()); // Obtem uma resposta\r\n  }\r\n\r\n  post(url, dado) {\r\n    return fetch(url, {\r\n      headers: {'Content-type' : 'application/json'},\r\n      method: 'post',\r\n      body: JSON.stringify(dado)\r\n    })\r\n    .then(res => this._handleErrors(res));\r\n  }\r\n\r\n  // get(url) {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     let xhr = new XMLHttpRequest();\r\n  //\r\n  //     xhr.open('GET', url); // open('METODO', 'ENDEREÇO')\r\n  //\r\n  //     /*  Lista de estados do XHR:\r\n  //         0: requisição ainda não iniciada\r\n  //\r\n  //         1: conexão com o servidor estabelecida\r\n  //\r\n  //         2: requisição recebida\r\n  //\r\n  //         3: processando requisição\r\n  //\r\n  //         4: requisição concluída e a resposta esta pronta\r\n  //     */\r\n  //     //Esta função será chamada toda vez que o estado do XHR mudar\r\n  //     xhr.onreadystatechange = () => {\r\n  //       if(xhr.readyState == 4 //4: requisição concluída e a resposta esta pronta\r\n  //         && xhr.status == 200){ //200 Indica que a resposta está ok, sem erros\r\n  //\r\n  //           resolve( JSON.parse(xhr.responseText) );// Converte JSON em um objeto JS\r\n  //           //.map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor)) );\r\n  //\r\n  //       } else if(xhr.readyState == 4 && xhr.status != 200){\r\n  //         reject(xhr.responseText);\r\n  //       }\r\n  //     }\r\n  //\r\n  //     xhr.send();\r\n  //   });\r\n  // }\r\n\r\n  // post(url, dado) {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     let xhr = new XMLHttpRequest();\r\n  //     xhr.open(\"POST\", url, true);\r\n  //     xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n  //     xhr.onreadystatechange = () => {\r\n  //\r\n  //         if (xhr.readyState == 4) {\r\n  //\r\n  //             if (xhr.status == 200) {\r\n  //\r\n  //                 resolve(JSON.parse(xhr.responseText));\r\n  //             } else {\r\n  //\r\n  //                 reject(xhr.responseText);\r\n  //             }\r\n  //         }\r\n  //     };\r\n  //     xhr.send(JSON.stringify(dado)); // usando JSON.stringifly para converter objeto em uma string no formato JSON.\r\n  //   });\r\n  // }\r\n}\r\n"]}