{"version":3,"sources":["../../app-es6/service/NegociacaoService.js"],"names":["HttpService","Negociacao","ConnectionFactory","NegociacaoDao","NegociacaoHelper","NegociacaoService","_httpService","url","mensagemErro","Promise","resolve","reject","get","then","negociacoes","map","converterObjetoEmNegociacao","dado","catch","console","log","erro","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","Error","obterNegociacoes","negociacao","getConnection","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterTodasNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\r\nimport {Negociacao} from '../model/Negociacao';\r\nimport {ConnectionFactory} from './ConnectionFactory';\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\r\nimport {NegociacaoHelper} from '../helper/NegociacaoHelper';\r\n\r\nexport class NegociacaoService {\r\n  constructor(){\r\n    this._httpService = new HttpService();\r\n  }\r\n\r\n  obterNegociacoes(url, mensagemErro) {\r\n    return new Promise( (resolve, reject) => {\r\n      this._httpService\r\n          .get(url)\r\n          .then( negociacoes => {\r\n            resolve(negociacoes.map(dado => NegociacaoHelper.converterObjetoEmNegociacao(dado)))\r\n          })\r\n          .catch(erro => {\r\n            console.log(erro);\r\n            reject(mensagemErro);\r\n          });\r\n    } );\r\n  }\r\n\r\n  obterTodasNegociacoes(){\r\n    return Promise.all([// Resolve estas promesis nessa ordem\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), [])// Vai retornar um array com todas as negociações concatenadas dentro\r\n                .map(dado => NegociacaoHelper.converterObjetoEmNegociacao(dado));\r\n\r\n            return negociacoes;\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n  }\r\n\r\n  obterNegociacoesDaSemana() {\r\n    return this.obterNegociacoes('negociacoes/semana', 'Não foi possível obter as negociações da semana.');\r\n  }\r\n\r\n  obterNegociacoesDaSemanaRetrasada() {\r\n    return this.obterNegociacoes('negociacoes/retrasada', 'Não foi possivel obter as negociações da semana retrasada');\r\n  }\r\n\r\n  obterNegociacoesDaSemanaAnterior() {\r\n    return this.obterNegociacoes('negociacoes/anterior', 'Não foi possivel obter as negociações da semana anterior');\r\n  }\r\n\r\n  cadastra(negociacao){\r\n    return ConnectionFactory\r\n      .getConnection()\r\n      .then(connection => new NegociacaoDao(connection))\r\n      .then(dao => dao.adiciona(negociacao))\r\n      .then(() => 'Negociacao adicionada com sucesso.')\r\n      .catch(erro => {\r\n        console.log(erro);\r\n        throw new Error('Não foi possível adicionar a negociacao.')\r\n      });\r\n  }\r\n\r\n  lista(){\r\n    return ConnectionFactory\r\n      .getConnection()\r\n      .then(connection => new NegociacaoDao(connection))\r\n      .then(dao => dao.listaTodos())\r\n      .catch(erro => {\r\n        console.log(erro);\r\n        throw new Error('Não foi possível obter as negociações.');\r\n      })\r\n  }\r\n\r\n  apaga(){\r\n    return ConnectionFactory\r\n      .getConnection()\r\n      .then(connection => new NegociacaoDao(connection))\r\n      .then(dao => dao.apagaTodos())\r\n      .then(() => 'Negociações apagadas com sucesso.')\r\n      .catch(erro => {\r\n        console.log(erro);\r\n        throw new Error('Não foi possível apagar as negociações.');\r\n      })\r\n  }\r\n\r\n  importa(listaAtual){\r\n    return this.obterTodasNegociacoes()\r\n      .then(negociacoes =>\r\n        negociacoes.filter(negociacao => // Filtra o array de negociações com base na condição retornada\r\n          !listaAtual // Negação do resultado do some()\r\n            .some( // some() percorre o array até a condição ser true, caso nunca seja ele retorna false\r\n              // Realiza a comparação do JSON (string) dos objetos\r\n              negociacaoExistente => JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)\r\n            )\r\n        )\r\n      )\r\n      .catch(erro => {\r\n        console.log(erro);\r\n        throw new Error('Não foi possível importar as negociações.');\r\n      });\r\n  }\r\n}\r\n"]}